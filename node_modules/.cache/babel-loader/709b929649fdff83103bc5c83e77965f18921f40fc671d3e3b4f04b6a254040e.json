{"ast":null,"code":"var _jsxFileName = \"D:\\\\mnist\\\\src\\\\components\\\\Drawer.jsx\",\n  _s = $RefreshSig$();\nimport { React, useState, useEffect } from \"react\";\nimport { Pixel, WHITE_VALUE, BLACK_VALUE } from \"./Pixel\";\nimport \"./styles/DrawArea.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Drawer() {\n  _s();\n  const rows = 28;\n  const columns = 28;\n  let firstPixelsValues = [];\n  for (let i = 0; i < rows * columns; i++) {\n    firstPixelsValues.push({\n      value: WHITE_VALUE\n    });\n  }\n  const [pixels, setPixels] = useState(firstPixelsValues);\n  const [countBlack, setCountBlack] = useState(0);\n  function updatePixels(index, value) {\n    const updatedPixels = [...pixels];\n    updatedPixels[index] = {\n      value: value\n    };\n    setPixels(updatedPixels);\n  }\n  useEffect(() => {\n    if (countBlack != 0) {\n      console.log(pixels);\n    }\n  }, [pixels]);\n  function clearScreen() {\n    setPixels(pixels.map(pixel => ({\n      value: WHITE_VALUE\n    })));\n    setCountBlack(0);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Drawer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DrawArea\",\n      children: pixels.map((el, i) => /*#__PURE__*/_jsxDEV(Pixel, {\n        ind: i,\n        value: el.value,\n        onUpdate: updatePixels,\n        setCntBlack: setCountBlack,\n        cntBlack: countBlack\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Clear\",\n      onClick: clearScreen,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(Drawer, \"7gAd75zJ2QDVVoV6ddJi3MengUg=\");\n_c = Drawer;\nexport default Drawer;\nvar _c;\n$RefreshReg$(_c, \"Drawer\");","map":{"version":3,"names":["React","useState","useEffect","Pixel","WHITE_VALUE","BLACK_VALUE","jsxDEV","_jsxDEV","Drawer","_s","rows","columns","firstPixelsValues","i","push","value","pixels","setPixels","countBlack","setCountBlack","updatePixels","index","updatedPixels","console","log","clearScreen","map","pixel","className","children","el","ind","onUpdate","setCntBlack","cntBlack","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/mnist/src/components/Drawer.jsx"],"sourcesContent":["import {React, useState, useEffect} from \"react\";\r\nimport {Pixel, WHITE_VALUE, BLACK_VALUE}  from \"./Pixel\";\r\nimport \"./styles/DrawArea.css\"\r\n\r\nfunction Drawer() {\r\n  const rows = 28;\r\n  const columns = 28;\r\n\r\n  let firstPixelsValues = [];\r\n  for (let i = 0; i < rows * columns; i++){\r\n    firstPixelsValues.push({value: WHITE_VALUE});\r\n  }\r\n\r\n  const [pixels, setPixels] = useState(firstPixelsValues)\r\n\r\n  const [countBlack, setCountBlack] = useState(0)\r\n\r\n  function updatePixels(index, value){\r\n    const updatedPixels = [...pixels];\r\n    updatedPixels[index] = {value: value};\r\n    setPixels(updatedPixels);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (countBlack != 0){\r\n      console.log(pixels);\r\n    }\r\n  \r\n  }, [pixels]);\r\n\r\n  function clearScreen() {\r\n    setPixels(pixels.map(pixel => ({ value: WHITE_VALUE })));\r\n    setCountBlack(0);\r\n  }\r\n\r\n  return (\r\n    <div className=\"Drawer\">\r\n      <div className=\"DrawArea\">\r\n        {pixels.map((el, i) => (\r\n          <Pixel \r\n          key={i} \r\n          ind={i} \r\n          value={el.value} \r\n          onUpdate={updatePixels} \r\n          setCntBlack={setCountBlack}\r\n          cntBlack={countBlack}\r\n        />\r\n      ))}\r\n      </div>\r\n      <button className=\"Clear\" onClick={clearScreen}>Clear</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Drawer;\r\n"],"mappings":";;AAAA,SAAQA,KAAK,EAAEC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,SAAQC,KAAK,EAAEC,WAAW,EAAEC,WAAW,QAAQ,SAAS;AACxD,OAAO,uBAAuB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,OAAO,GAAG,EAAE;EAElB,IAAIC,iBAAiB,GAAG,EAAE;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,GAAGC,OAAO,EAAEE,CAAC,EAAE,EAAC;IACtCD,iBAAiB,CAACE,IAAI,CAAC;MAACC,KAAK,EAAEX;IAAW,CAAC,CAAC;EAC9C;EAEA,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAACW,iBAAiB,CAAC;EAEvD,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAE/C,SAASmB,YAAYA,CAACC,KAAK,EAAEN,KAAK,EAAC;IACjC,MAAMO,aAAa,GAAG,CAAC,GAAGN,MAAM,CAAC;IACjCM,aAAa,CAACD,KAAK,CAAC,GAAG;MAACN,KAAK,EAAEA;IAAK,CAAC;IACrCE,SAAS,CAACK,aAAa,CAAC;EAC1B;EAEApB,SAAS,CAAC,MAAM;IACd,IAAIgB,UAAU,IAAI,CAAC,EAAC;MAClBK,OAAO,CAACC,GAAG,CAACR,MAAM,CAAC;IACrB;EAEF,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,SAASS,WAAWA,CAAA,EAAG;IACrBR,SAAS,CAACD,MAAM,CAACU,GAAG,CAACC,KAAK,KAAK;MAAEZ,KAAK,EAAEX;IAAY,CAAC,CAAC,CAAC,CAAC;IACxDe,aAAa,CAAC,CAAC,CAAC;EAClB;EAEA,oBACEZ,OAAA;IAAKqB,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACrBtB,OAAA;MAAKqB,SAAS,EAAC,UAAU;MAAAC,QAAA,EACtBb,MAAM,CAACU,GAAG,CAAC,CAACI,EAAE,EAAEjB,CAAC,kBAChBN,OAAA,CAACJ,KAAK;QAEN4B,GAAG,EAAElB,CAAE;QACPE,KAAK,EAAEe,EAAE,CAACf,KAAM;QAChBiB,QAAQ,EAAEZ,YAAa;QACvBa,WAAW,EAAEd,aAAc;QAC3Be,QAAQ,EAAEhB;MAAW,GALhBL,CAAC;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMP,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACN/B,OAAA;MAAQqB,SAAS,EAAC,OAAO;MAACW,OAAO,EAAEd,WAAY;MAAAI,QAAA,EAAC;IAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEV;AAAC7B,EAAA,CAhDQD,MAAM;AAAAgC,EAAA,GAANhC,MAAM;AAkDf,eAAeA,MAAM;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}