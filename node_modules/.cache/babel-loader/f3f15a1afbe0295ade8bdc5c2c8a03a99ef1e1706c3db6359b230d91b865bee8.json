{"ast":null,"code":"var _jsxFileName = \"D:\\\\mnist\\\\src\\\\components\\\\Drawer.jsx\",\n  _s = $RefreshSig$();\nimport { React, useState, useEffect } from \"react\";\nimport { Pixel, WHITE_VALUE, BLACK_VALUE } from \"./Pixel\";\nimport Pred from \"./Pred\";\nimport \"./styles/Drawer.css\";\n\n// Drawer компонента окна для рисования\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Drawer(props) {\n  _s();\n  const rows = 28; // количество строк из пикселей\n  const columns = 28; // количество пикселей в строке\n\n  let firstPixelsValues = [];\n  for (let i = 0; i < rows * columns; i++) {\n    firstPixelsValues.push({\n      value: WHITE_VALUE\n    });\n  }\n\n  // pixels состояние значений всех пикселей.\n  const [pixels, setPixels] = useState(firstPixelsValues);\n\n  // countBlack состояние количества активных черных пикселей на экране.\n  const [countBlack, setCountBlack] = useState(0);\n\n  // updatePixels обновление состояния значения конкретного пикселя.\n  function updatePixels(index, value) {\n    const updatedPixels = [...pixels];\n    if (updatedPixels[index].value !== value) {\n      updatedPixels[index] = {\n        value: value\n      };\n      setPixels(updatedPixels);\n    }\n  }\n  useEffect(() => {\n    if (countBlack == 0) {\n      // если нет черного цвета\n    } else {}\n    console.log(pixels);\n    console.log(countBlack);\n  }, [pixels]);\n  function clearScreen() {\n    setPixels(pixels.map(pixel => ({\n      value: WHITE_VALUE\n    })));\n    setCountBlack(0);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Drawer\",\n    children: [/*#__PURE__*/_jsxDEV(Pred, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DrawArea\",\n      children: pixels.map((el, i) => /*#__PURE__*/_jsxDEV(Pixel, {\n        ind: i,\n        value: el.value,\n        onUpdate: updatePixels,\n        isLeftDrawing: props.isLeftDrawing,\n        isRightDrawing: props.isRightDrawing,\n        setCntBlack: setCountBlack,\n        cntBlack: countBlack\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Clear\",\n      onClick: clearScreen,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Drawer, \"7gAd75zJ2QDVVoV6ddJi3MengUg=\");\n_c = Drawer;\nexport default Drawer;\nvar _c;\n$RefreshReg$(_c, \"Drawer\");","map":{"version":3,"names":["React","useState","useEffect","Pixel","WHITE_VALUE","BLACK_VALUE","Pred","jsxDEV","_jsxDEV","Drawer","props","_s","rows","columns","firstPixelsValues","i","push","value","pixels","setPixels","countBlack","setCountBlack","updatePixels","index","updatedPixels","console","log","clearScreen","map","pixel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","el","ind","onUpdate","isLeftDrawing","isRightDrawing","setCntBlack","cntBlack","onClick","_c","$RefreshReg$"],"sources":["D:/mnist/src/components/Drawer.jsx"],"sourcesContent":["import {React, useState, useEffect} from \"react\";\r\nimport {Pixel, WHITE_VALUE, BLACK_VALUE}  from \"./Pixel\";\r\nimport Pred from \"./Pred\";\r\nimport \"./styles/Drawer.css\"\r\n\r\n// Drawer компонента окна для рисования\r\nfunction Drawer(props) {\r\n  const rows = 28; // количество строк из пикселей\r\n  const columns = 28; // количество пикселей в строке\r\n\r\n  let firstPixelsValues = [];\r\n  for (let i = 0; i < rows * columns; i++){\r\n    firstPixelsValues.push({value: WHITE_VALUE});\r\n  }\r\n\r\n  // pixels состояние значений всех пикселей.\r\n  const [pixels, setPixels] = useState(firstPixelsValues);\r\n\r\n  // countBlack состояние количества активных черных пикселей на экране.\r\n  const [countBlack, setCountBlack] = useState(0);\r\n\r\n  // updatePixels обновление состояния значения конкретного пикселя.\r\n  function updatePixels(index, value){\r\n    const updatedPixels = [...pixels];\r\n    if (updatedPixels[index].value !== value){\r\n      updatedPixels[index] = {value: value};\r\n      setPixels(updatedPixels);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (countBlack == 0){\r\n      // если нет черного цвета\r\n\r\n    } else {\r\n\r\n    }\r\n    console.log(pixels);\r\n    console.log(countBlack)\r\n  }, [pixels]);\r\n\r\n  function clearScreen() {\r\n    setPixels(pixels.map(pixel => ({ value: WHITE_VALUE })));\r\n    setCountBlack(0);\r\n  }\r\n\r\n  return (\r\n    <div className=\"Drawer\">\r\n      <Pred />\r\n      <div className=\"DrawArea\" >\r\n        {pixels.map((el, i) => (\r\n          <Pixel \r\n          key={i} \r\n          ind={i} \r\n          value={el.value} \r\n          onUpdate={updatePixels}\r\n          isLeftDrawing={props.isLeftDrawing}\r\n          isRightDrawing={props.isRightDrawing}\r\n          setCntBlack={setCountBlack}\r\n          cntBlack={countBlack}\r\n        />\r\n      ))}\r\n      </div>\r\n      <button className=\"Clear\" onClick={clearScreen}>Clear</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Drawer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}